{"ast":null,"code":"const production = true;\nexport const baseUrl = production ? \"https://apigpt.dialogmakers-international.com\" : \"http://localhost:8086\";\nconst getAuthToken = () => {\n  let userData = localStorage.getItem('persist:root');\n  if (userData) {\n    userData = JSON.parse(userData);\n    let user = JSON.parse(userData.user);\n    return `Bearer ${user.token}`;\n  } else {\n    alert('Error');\n  }\n};\nexport const translateText = async ({\n  toTranslateText,\n  onStream,\n  language = 'english',\n  operation\n}) => {\n  try {\n    if (language == 'english') {\n      language = 'US american english';\n    }\n    const response = await fetch(`${baseUrl}/api`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": getAuthToken()\n      },\n      body: JSON.stringify({\n        text: toTranslateText,\n        language: language,\n        operation: operation\n      })\n    });\n    if (!response.ok || !response.body) {\n      throw response.statusText;\n    }\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n    const loopRunner = true;\n    while (loopRunner) {\n      const {\n        value,\n        done\n      } = await reader.read();\n      if (done) {\n        break;\n      }\n      const decodedChunk = decoder.decode(value, {\n        stream: true\n      });\n      onStream(decodedChunk);\n    }\n    return true;\n  } catch (e) {\n    throw Error(e);\n  }\n};","map":{"version":3,"names":["production","baseUrl","getAuthToken","userData","localStorage","getItem","JSON","parse","user","token","alert","translateText","toTranslateText","onStream","language","operation","response","fetch","method","headers","Accept","body","stringify","text","ok","statusText","reader","getReader","decoder","TextDecoder","loopRunner","value","done","read","decodedChunk","decode","stream","e","Error"],"sources":["/home/sumit/my-projects/DIALOGMAKERS PROJECTS 2/EXTENSION/extension-admin/src/helpers.js"],"sourcesContent":["const production = true;\nexport const baseUrl = production ? \"https://apigpt.dialogmakers-international.com\" : \"http://localhost:8086\";\n\nconst getAuthToken = () => {\n  let userData = localStorage.getItem('persist:root')\n  if(userData) {\n      userData = JSON.parse(userData)\n      let user = JSON.parse(userData.user)\n      return `Bearer ${user.token}`\n  }else{\n    alert('Error')\n  }\n}\nexport const translateText = async ({toTranslateText, onStream , language = 'english',operation}) => {\n  try {\n    if(language == 'english'){\n      language = 'US american english'\n    }\n    const response = await fetch(`${baseUrl}/api`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\",\n        \"Authorization\":getAuthToken()\n      },\n      body: JSON.stringify({\n        text: toTranslateText,\n        language: language,\n        operation:operation\n      }),\n    });\n    if (!response.ok || !response.body) {\n      throw response.statusText;\n    }\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n    const loopRunner = true;\n    while (loopRunner) {\n      const { value, done } = await reader.read();\n      if (done) {\n        break;\n      }\n      const decodedChunk = decoder.decode(value, { stream: true });\n      onStream(decodedChunk);\n    }\n    return true;\n  } catch (e) {\n    throw Error(e);\n  }\n};\n"],"mappings":"AAAA,MAAMA,UAAU,GAAG,IAAI;AACvB,OAAO,MAAMC,OAAO,GAAGD,UAAU,GAAG,+CAA+C,GAAG,uBAAuB;AAE7G,MAAME,YAAY,GAAGA,CAAA,KAAM;EACzB,IAAIC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EACnD,IAAGF,QAAQ,EAAE;IACTA,QAAQ,GAAGG,IAAI,CAACC,KAAK,CAACJ,QAAQ,CAAC;IAC/B,IAAIK,IAAI,GAAGF,IAAI,CAACC,KAAK,CAACJ,QAAQ,CAACK,IAAI,CAAC;IACpC,OAAQ,UAASA,IAAI,CAACC,KAAM,EAAC;EACjC,CAAC,MAAI;IACHC,KAAK,CAAC,OAAO,CAAC;EAChB;AACF,CAAC;AACD,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAO;EAACC,eAAe;EAAEC,QAAQ;EAAGC,QAAQ,GAAG,SAAS;EAACC;AAAS,CAAC,KAAK;EACnG,IAAI;IACF,IAAGD,QAAQ,IAAI,SAAS,EAAC;MACvBA,QAAQ,GAAG,qBAAqB;IAClC;IACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEhB,OAAQ,MAAK,EAAE;MAC7CiB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACPC,MAAM,EAAE,mCAAmC;QAC3C,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAClB,YAAY,CAAC;MAC/B,CAAC;MACDmB,IAAI,EAAEf,IAAI,CAACgB,SAAS,CAAC;QACnBC,IAAI,EAAEX,eAAe;QACrBE,QAAQ,EAAEA,QAAQ;QAClBC,SAAS,EAACA;MACZ,CAAC;IACH,CAAC,CAAC;IACF,IAAI,CAACC,QAAQ,CAACQ,EAAE,IAAI,CAACR,QAAQ,CAACK,IAAI,EAAE;MAClC,MAAML,QAAQ,CAACS,UAAU;IAC3B;IACA,MAAMC,MAAM,GAAGV,QAAQ,CAACK,IAAI,CAACM,SAAS,CAAC,CAAC;IACxC,MAAMC,OAAO,GAAG,IAAIC,WAAW,CAAC,CAAC;IACjC,MAAMC,UAAU,GAAG,IAAI;IACvB,OAAOA,UAAU,EAAE;MACjB,MAAM;QAAEC,KAAK;QAAEC;MAAK,CAAC,GAAG,MAAMN,MAAM,CAACO,IAAI,CAAC,CAAC;MAC3C,IAAID,IAAI,EAAE;QACR;MACF;MACA,MAAME,YAAY,GAAGN,OAAO,CAACO,MAAM,CAACJ,KAAK,EAAE;QAAEK,MAAM,EAAE;MAAK,CAAC,CAAC;MAC5DvB,QAAQ,CAACqB,YAAY,CAAC;IACxB;IACA,OAAO,IAAI;EACb,CAAC,CAAC,OAAOG,CAAC,EAAE;IACV,MAAMC,KAAK,CAACD,CAAC,CAAC;EAChB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}