{"ast":null,"code":"var _jsxFileName = \"/home/sumit/my-projects/DIALOGMAKERS PROJECTS 2/EXTENSION/extension-admin/src/components/test.jsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Test() {\n  _s();\n  const [result, setResult] = useState(\"\");\n  const openAI = async () => {\n    try {\n      let stream = await axios({\n        method: \"get\",\n        url: \"http://localhost:8086/api\",\n        headers: {\n          Accept: \"application/json, text/plain, */*\",\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      // Here we start prepping for the streaming response\n      const reader = stream.data.getReader();\n      const decoder = new TextDecoder();\n      const loopRunner = true;\n      while (loopRunner) {\n        console.log(loopRunner, \"loopRunner\");\n        // Here we start reading the stream, until its done.\n        const {\n          value,\n          done\n        } = await reader.read();\n        if (done) {\n          break;\n        }\n        const decodedChunk = decoder.decode(value, {\n          stream: true\n        });\n        console.log(decodedChunk);\n        setResult(answer => answer + decodedChunk); // update state with new chunk\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const openai2 = async () => {\n    const response = await fetch(\"http://localhost:8086/api\", {\n      method: \"get\",\n      headers: {\n        Accept: \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!response.ok || !response.body) {\n      throw response.statusText;\n    }\n\n    // Here we start prepping for the streaming response\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n    const loopRunner = true;\n    while (loopRunner) {\n      console.log(loopRunner, \"loopRunner\");\n      // Here we start reading the stream, until its done.\n      const {\n        value,\n        done\n      } = await reader.read();\n      if (done) {\n        break;\n      }\n      const decodedChunk = decoder.decode(value, {\n        stream: true\n      });\n      console.log(decodedChunk);\n      setResult(answer => answer + decodedChunk); // update state with new chunk\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [result, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        openai2();\n        openAI();\n      },\n      children: \"click\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Test, \"qoGl22B7WAXz9bHytSnRSI+DHp8=\");\n_c = Test;\nexport default Test;\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["axios","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Test","_s","result","setResult","openAI","stream","method","url","headers","Accept","reader","data","getReader","decoder","TextDecoder","loopRunner","console","log","value","done","read","decodedChunk","decode","answer","e","openai2","response","fetch","ok","body","statusText","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/sumit/my-projects/DIALOGMAKERS PROJECTS 2/EXTENSION/extension-admin/src/components/test.jsx"],"sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nfunction Test() {\n  const [result, setResult] = useState(\"\");\n  const openAI = async () => {\n    try {\n      let stream = await axios({\n        method: \"get\",\n        url: \"http://localhost:8086/api\",\n        headers: {\n          Accept: \"application/json, text/plain, */*\",\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      // Here we start prepping for the streaming response\n      const reader = stream.data.getReader();\n      const decoder = new TextDecoder();\n      const loopRunner = true;\n      while (loopRunner) {\n        console.log(loopRunner, \"loopRunner\");\n        // Here we start reading the stream, until its done.\n        const { value, done } = await reader.read();\n        if (done) {\n          break;\n        }\n        const decodedChunk = decoder.decode(value, { stream: true });\n        console.log(decodedChunk);\n        setResult((answer) => answer + decodedChunk); // update state with new chunk\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const openai2 = async () => {\n    const response = await fetch(\"http://localhost:8086/api\", {\n      method: \"get\",\n      headers: {\n        Accept: \"application/json, text/plain, */*\",\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    if (!response.ok || !response.body) {\n      throw response.statusText;\n    }\n\n    // Here we start prepping for the streaming response\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n    const loopRunner = true;\n    while (loopRunner) {\n      console.log(loopRunner, \"loopRunner\");\n      // Here we start reading the stream, until its done.\n      const { value, done } = await reader.read();\n      if (done) {\n        break;\n      }\n      const decodedChunk = decoder.decode(value, { stream: true });\n      console.log(decodedChunk);\n      setResult((answer) => answer + decodedChunk); // update state with new chunk\n    }\n  };\n  return (\n    <>\n      {result}\n      <br />\n      <button onClick={() => {openai2(); openAI() }}>click</button>\n    </>\n  );\n}\n\nexport default Test;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}